# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if (defined(ohos_lite)) {
  import("//build/lite/config/component/lite_component.gni")
} else {
  import("//build/ohos.gni")
}
libunwind_code_dir = "${target_gen_dir}/libunwind-1.6.2"
common_source = [
  "$libunwind_code_dir/src/dwarf/Gexpr.c",
  "$libunwind_code_dir/src/dwarf/Gfde.c",
  "$libunwind_code_dir/src/dwarf/Gfind_proc_info-lsb.c",
  "$libunwind_code_dir/src/dwarf/Gfind_unwind_table.c",
  "$libunwind_code_dir/src/dwarf/global.c",
  "$libunwind_code_dir/src/dwarf/Gparser.c",
  "$libunwind_code_dir/src/dwarf/Gpe.c",
  "$libunwind_code_dir/src/dwarf/Lexpr.c",
  "$libunwind_code_dir/src/dwarf/Lfde.c",
  "$libunwind_code_dir/src/dwarf/Lfind_proc_info-lsb.c",
  "$libunwind_code_dir/src/dwarf/Lfind_unwind_table.c",
  "$libunwind_code_dir/src/dwarf/Lparser.c",
  "$libunwind_code_dir/src/dwarf/Lpe.c",
  "$libunwind_code_dir/src/mi/backtrace.c",
  "$libunwind_code_dir/src/mi/dyn-cancel.c",
  "$libunwind_code_dir/src/mi/dyn-info-list.c",
  "$libunwind_code_dir/src/mi/dyn-register.c",
  "$libunwind_code_dir/src/mi/flush_cache.c",
  "$libunwind_code_dir/src/mi/Gdestroy_addr_space.c",
  "$libunwind_code_dir/src/mi/Gdyn-extract.c",
  "$libunwind_code_dir/src/mi/Gdyn-remote.c",
  "$libunwind_code_dir/src/mi/Gfind_dynamic_proc_info.c",
  "$libunwind_code_dir/src/mi/Gget_accessors.c",
  "$libunwind_code_dir/src/mi/Gget_fpreg.c",
  "$libunwind_code_dir/src/mi/Gget_proc_info_by_ip.c",
  "$libunwind_code_dir/src/mi/Gget_proc_name.c",
  "$libunwind_code_dir/src/mi/Gget_reg.c",
  "$libunwind_code_dir/src/mi/Gput_dynamic_unwind_info.c",
  "$libunwind_code_dir/src/mi/Gset_cache_size.c",
  "$libunwind_code_dir/src/mi/Gset_caching_policy.c",
  "$libunwind_code_dir/src/mi/Gset_fpreg.c",
  "$libunwind_code_dir/src/mi/Gset_reg.c",
  "$libunwind_code_dir/src/mi/init.c",
  "$libunwind_code_dir/src/mi/Ldestroy_addr_space.c",
  "$libunwind_code_dir/src/mi/Ldyn-extract.c",
  "$libunwind_code_dir/src/mi/Lfind_dynamic_proc_info.c",
  "$libunwind_code_dir/src/mi/Lget_fpreg.c",
  "$libunwind_code_dir/src/mi/Lget_proc_info_by_ip.c",
  "$libunwind_code_dir/src/mi/Lget_proc_name.c",
  "$libunwind_code_dir/src/mi/Lget_reg.c",
  "$libunwind_code_dir/src/mi/Lput_dynamic_unwind_info.c",
  "$libunwind_code_dir/src/mi/Lset_cache_size.c",
  "$libunwind_code_dir/src/mi/Lset_caching_policy.c",
  "$libunwind_code_dir/src/mi/Lset_fpreg.c",
  "$libunwind_code_dir/src/mi/Lset_reg.c",
  "$libunwind_code_dir/src/mi/mempool.c",
  "$libunwind_code_dir/src/mi/strerror.c",
  "$libunwind_code_dir/src/os-linux.c",
  "$libunwind_code_dir/src/ptrace/_UPT_access_fpreg.c",
  "$libunwind_code_dir/src/ptrace/_UPT_access_mem.c",
  "$libunwind_code_dir/src/ptrace/_UPT_access_reg.c",
  "$libunwind_code_dir/src/ptrace/_UPT_accessors.c",
  "$libunwind_code_dir/src/ptrace/_UPT_create.c",
  "$libunwind_code_dir/src/ptrace/_UPT_destroy.c",
  "$libunwind_code_dir/src/ptrace/_UPT_find_proc_info.c",
  "$libunwind_code_dir/src/ptrace/_UPT_get_dyn_info_list_addr.c",
  "$libunwind_code_dir/src/ptrace/_UPT_get_proc_name.c",
  "$libunwind_code_dir/src/ptrace/_UPT_put_unwind_info.c",
  "$libunwind_code_dir/src/ptrace/_UPT_reg_offset.c",
  "$libunwind_code_dir/src/ptrace/_UPT_resume.c",
]

# as libc++ is static linked with libunwind.a
# we remove the Gstep.c for duplicated symbol violation
arm_source = [
  "$libunwind_code_dir/src/arm/Gapply_reg_state.c",
  "$libunwind_code_dir/src/arm/Gcreate_addr_space.c",
  "$libunwind_code_dir/src/arm/Gex_tables.c",
  "$libunwind_code_dir/src/arm/Gget_proc_info.c",
  "$libunwind_code_dir/src/arm/Gget_save_loc.c",
  "$libunwind_code_dir/src/arm/Gglobal.c",
  "$libunwind_code_dir/src/arm/Ginit.c",
  "$libunwind_code_dir/src/arm/Ginit_local.c",
  "$libunwind_code_dir/src/arm/Ginit_remote.c",
  "$libunwind_code_dir/src/arm/Gos-linux.c",
  "$libunwind_code_dir/src/arm/Greg_states_iterate.c",
  "$libunwind_code_dir/src/arm/Gregs.c",
  "$libunwind_code_dir/src/arm/Gresume.c",
  "$libunwind_code_dir/src/arm/Gstash_frame.c",
  "$libunwind_code_dir/src/arm/Gstep.c",
  "$libunwind_code_dir/src/arm/Gtrace.c",
  "$libunwind_code_dir/src/arm/Lcreate_addr_space.c",
  "$libunwind_code_dir/src/arm/Lex_tables.c",
  "$libunwind_code_dir/src/arm/Lget_proc_info.c",
  "$libunwind_code_dir/src/arm/Lget_save_loc.c",
  "$libunwind_code_dir/src/arm/Lglobal.c",
  "$libunwind_code_dir/src/arm/Linit.c",
  "$libunwind_code_dir/src/arm/Linit_local.c",
  "$libunwind_code_dir/src/arm/Linit_remote.c",
  "$libunwind_code_dir/src/arm/Los-linux.c",
  "$libunwind_code_dir/src/arm/Lregs.c",
  "$libunwind_code_dir/src/arm/Lresume.c",
  "$libunwind_code_dir/src/arm/Lstash_frame.c",
  "$libunwind_code_dir/src/arm/Lstep.c",
  "$libunwind_code_dir/src/arm/Ltrace.c",
  "$libunwind_code_dir/src/arm/getcontext.S",
  "$libunwind_code_dir/src/arm/is_fpreg.c",
  "$libunwind_code_dir/src/arm/regname.c",
  "$libunwind_code_dir/src/arm/siglongjmp.S",
  "$libunwind_code_dir/src/elf32.c",
]

arm64_source = [
  "$libunwind_code_dir/src/aarch64/Gcreate_addr_space.c",
  "$libunwind_code_dir/src/aarch64/Gget_proc_info.c",
  "$libunwind_code_dir/src/aarch64/Gget_save_loc.c",
  "$libunwind_code_dir/src/aarch64/Gglobal.c",
  "$libunwind_code_dir/src/aarch64/Ginit.c",
  "$libunwind_code_dir/src/aarch64/Ginit_local.c",
  "$libunwind_code_dir/src/aarch64/Ginit_remote.c",
  "$libunwind_code_dir/src/aarch64/Gis_signal_frame.c",
  "$libunwind_code_dir/src/aarch64/Gregs.c",
  "$libunwind_code_dir/src/aarch64/Gresume.c",
  "$libunwind_code_dir/src/aarch64/Gstash_frame.c",
  "$libunwind_code_dir/src/aarch64/Gstep.c",
  "$libunwind_code_dir/src/aarch64/Gtrace.c",
  "$libunwind_code_dir/src/aarch64/Lcreate_addr_space.c",
  "$libunwind_code_dir/src/aarch64/Lget_proc_info.c",
  "$libunwind_code_dir/src/aarch64/Lget_save_loc.c",
  "$libunwind_code_dir/src/aarch64/Lglobal.c",
  "$libunwind_code_dir/src/aarch64/Linit.c",
  "$libunwind_code_dir/src/aarch64/Linit_local.c",
  "$libunwind_code_dir/src/aarch64/Linit_remote.c",
  "$libunwind_code_dir/src/aarch64/Lis_signal_frame.c",
  "$libunwind_code_dir/src/aarch64/Lregs.c",
  "$libunwind_code_dir/src/aarch64/Lresume.c",
  "$libunwind_code_dir/src/aarch64/Lstash_frame.c",
  "$libunwind_code_dir/src/aarch64/Lstep.c",
  "$libunwind_code_dir/src/aarch64/Ltrace.c",
  "$libunwind_code_dir/src/aarch64/getcontext.S",
  "$libunwind_code_dir/src/aarch64/is_fpreg.c",
  "$libunwind_code_dir/src/aarch64/regname.c",
  "$libunwind_code_dir/src/elf64.c",
]

x64_source = [
  "$libunwind_code_dir/src/elf64.c",
  "$libunwind_code_dir/src/x86_64/Gcreate_addr_space.c",
  "$libunwind_code_dir/src/x86_64/Gget_proc_info.c",
  "$libunwind_code_dir/src/x86_64/Gget_save_loc.c",
  "$libunwind_code_dir/src/x86_64/Gglobal.c",
  "$libunwind_code_dir/src/x86_64/Ginit.c",
  "$libunwind_code_dir/src/x86_64/Ginit_local.c",
  "$libunwind_code_dir/src/x86_64/Ginit_remote.c",
  "$libunwind_code_dir/src/x86_64/Gos-linux.c",
  "$libunwind_code_dir/src/x86_64/Gregs.c",
  "$libunwind_code_dir/src/x86_64/Gresume.c",
  "$libunwind_code_dir/src/x86_64/Gstash_frame.c",
  "$libunwind_code_dir/src/x86_64/Gstep.c",
  "$libunwind_code_dir/src/x86_64/Gtrace.c",
  "$libunwind_code_dir/src/x86_64/Lcreate_addr_space.c",
  "$libunwind_code_dir/src/x86_64/Lget_proc_info.c",
  "$libunwind_code_dir/src/x86_64/Lget_save_loc.c",
  "$libunwind_code_dir/src/x86_64/Lglobal.c",
  "$libunwind_code_dir/src/x86_64/Linit.c",
  "$libunwind_code_dir/src/x86_64/Linit_local.c",
  "$libunwind_code_dir/src/x86_64/Linit_remote.c",
  "$libunwind_code_dir/src/x86_64/Los-linux.c",
  "$libunwind_code_dir/src/x86_64/Lregs.c",
  "$libunwind_code_dir/src/x86_64/Lresume.c",
  "$libunwind_code_dir/src/x86_64/Lstash_frame.c",
  "$libunwind_code_dir/src/x86_64/Lstep.c",
  "$libunwind_code_dir/src/x86_64/Ltrace.c",
  "$libunwind_code_dir/src/x86_64/getcontext.S",
  "$libunwind_code_dir/src/x86_64/is_fpreg.c",
  "$libunwind_code_dir/src/x86_64/regname.c",
  "$libunwind_code_dir/src/x86_64/setcontext.S",
]

riscv64_source = [
  "$libunwind_code_dir/src/elf64.c",
  "$libunwind_code_dir/src/riscv/Gapply_reg_state.c",
  "$libunwind_code_dir/src/riscv/Gcreate_addr_space.c",
  "$libunwind_code_dir/src/riscv/getcontext.S",
  "$libunwind_code_dir/src/riscv/Gget_proc_info.c",
  "$libunwind_code_dir/src/riscv/Gget_save_loc.c",
  "$libunwind_code_dir/src/riscv/Gglobal.c",
  "$libunwind_code_dir/src/riscv/Ginit.c",
  "$libunwind_code_dir/src/riscv/Ginit_local.c",
  "$libunwind_code_dir/src/riscv/Ginit_remote.c",
  "$libunwind_code_dir/src/riscv/Gis_signal_frame.c",
  "$libunwind_code_dir/src/riscv/Gregs.c",
  "$libunwind_code_dir/src/riscv/Greg_states_iterate.c",
  "$libunwind_code_dir/src/riscv/Gresume.c",
  "$libunwind_code_dir/src/riscv/Gstep.c",
  "$libunwind_code_dir/src/riscv/is_fpreg.c",
  "$libunwind_code_dir/src/riscv/Lcreate_addr_space.c",
  "$libunwind_code_dir/src/riscv/Lget_proc_info.c",
  "$libunwind_code_dir/src/riscv/Lget_save_loc.c",
  "$libunwind_code_dir/src/riscv/Lglobal.c",
  "$libunwind_code_dir/src/riscv/Linit.c",
  "$libunwind_code_dir/src/riscv/Linit_local.c",
  "$libunwind_code_dir/src/riscv/Linit_remote.c",
  "$libunwind_code_dir/src/riscv/Lis_signal_frame.c",
  "$libunwind_code_dir/src/riscv/Lregs.c",
  "$libunwind_code_dir/src/riscv/Lreg_states_iterate.c",
  "$libunwind_code_dir/src/riscv/Lresume.c",
  "$libunwind_code_dir/src/riscv/Lstep.c",
  "$libunwind_code_dir/src/riscv/offsets.h",
  "$libunwind_code_dir/src/riscv/regname.c",
  "$libunwind_code_dir/src/riscv/setcontext.S",
  "$libunwind_code_dir/src/riscv/siglongjmp.S",
]

action("libunwind_action") {
  print("libunwind_action is exec")
  script = "//third_party/libunwind/install.py"
  outputs = [
    "$libunwind_code_dir/src/dwarf/Gexpr.c",
    "$libunwind_code_dir/src/dwarf/Gfde.c",
    "$libunwind_code_dir/src/dwarf/Gfind_proc_info-lsb.c",
    "$libunwind_code_dir/src/dwarf/Gfind_unwind_table.c",
    "$libunwind_code_dir/src/dwarf/global.c",
    "$libunwind_code_dir/src/dwarf/Gparser.c",
    "$libunwind_code_dir/src/dwarf/Gpe.c",
    "$libunwind_code_dir/src/dwarf/Lexpr.c",
    "$libunwind_code_dir/src/dwarf/Lfde.c",
    "$libunwind_code_dir/src/dwarf/Lfind_proc_info-lsb.c",
    "$libunwind_code_dir/src/dwarf/Lfind_unwind_table.c",
    "$libunwind_code_dir/src/dwarf/Lparser.c",
    "$libunwind_code_dir/src/dwarf/Lpe.c",
    "$libunwind_code_dir/src/mi/backtrace.c",
    "$libunwind_code_dir/src/mi/dyn-cancel.c",
    "$libunwind_code_dir/src/mi/dyn-info-list.c",
    "$libunwind_code_dir/src/mi/dyn-register.c",
    "$libunwind_code_dir/src/mi/flush_cache.c",
    "$libunwind_code_dir/src/mi/Gdestroy_addr_space.c",
    "$libunwind_code_dir/src/mi/Gdyn-extract.c",
    "$libunwind_code_dir/src/mi/Gdyn-remote.c",
    "$libunwind_code_dir/src/mi/Gfind_dynamic_proc_info.c",
    "$libunwind_code_dir/src/mi/Gget_accessors.c",
    "$libunwind_code_dir/src/mi/Gget_fpreg.c",
    "$libunwind_code_dir/src/mi/Gget_proc_info_by_ip.c",
    "$libunwind_code_dir/src/mi/Gget_proc_name.c",
    "$libunwind_code_dir/src/mi/Gget_reg.c",
    "$libunwind_code_dir/src/mi/Gput_dynamic_unwind_info.c",
    "$libunwind_code_dir/src/mi/Gset_cache_size.c",
    "$libunwind_code_dir/src/mi/Gset_caching_policy.c",
    "$libunwind_code_dir/src/mi/Gset_fpreg.c",
    "$libunwind_code_dir/src/mi/Gset_reg.c",
    "$libunwind_code_dir/src/mi/init.c",
    "$libunwind_code_dir/src/mi/Ldestroy_addr_space.c",
    "$libunwind_code_dir/src/mi/Ldyn-extract.c",
    "$libunwind_code_dir/src/mi/Lfind_dynamic_proc_info.c",
    "$libunwind_code_dir/src/mi/Lget_fpreg.c",
    "$libunwind_code_dir/src/mi/Lget_proc_info_by_ip.c",
    "$libunwind_code_dir/src/mi/Lget_proc_name.c",
    "$libunwind_code_dir/src/mi/Lget_reg.c",
    "$libunwind_code_dir/src/mi/Lput_dynamic_unwind_info.c",
    "$libunwind_code_dir/src/mi/Lset_cache_size.c",
    "$libunwind_code_dir/src/mi/Lset_caching_policy.c",
    "$libunwind_code_dir/src/mi/Lset_fpreg.c",
    "$libunwind_code_dir/src/mi/Lset_reg.c",
    "$libunwind_code_dir/src/mi/mempool.c",
    "$libunwind_code_dir/src/mi/strerror.c",
    "$libunwind_code_dir/src/os-linux.c",
    "$libunwind_code_dir/src/ptrace/_UPT_access_fpreg.c",
    "$libunwind_code_dir/src/ptrace/_UPT_access_mem.c",
    "$libunwind_code_dir/src/ptrace/_UPT_access_reg.c",
    "$libunwind_code_dir/src/ptrace/_UPT_accessors.c",
    "$libunwind_code_dir/src/ptrace/_UPT_create.c",
    "$libunwind_code_dir/src/ptrace/_UPT_destroy.c",
    "$libunwind_code_dir/src/ptrace/_UPT_find_proc_info.c",
    "$libunwind_code_dir/src/ptrace/_UPT_get_dyn_info_list_addr.c",
    "$libunwind_code_dir/src/ptrace/_UPT_get_proc_name.c",
    "$libunwind_code_dir/src/ptrace/_UPT_put_unwind_info.c",
    "$libunwind_code_dir/src/ptrace/_UPT_reg_offset.c",
    "$libunwind_code_dir/src/ptrace/_UPT_resume.c",
    "$libunwind_code_dir/src/arm/Gapply_reg_state.c",
    "$libunwind_code_dir/src/arm/Gcreate_addr_space.c",
    "$libunwind_code_dir/src/arm/Gex_tables.c",
    "$libunwind_code_dir/src/arm/Gget_proc_info.c",
    "$libunwind_code_dir/src/arm/Gget_save_loc.c",
    "$libunwind_code_dir/src/arm/Gglobal.c",
    "$libunwind_code_dir/src/arm/Ginit.c",
    "$libunwind_code_dir/src/arm/Ginit_local.c",
    "$libunwind_code_dir/src/arm/Ginit_remote.c",
    "$libunwind_code_dir/src/arm/Gos-linux.c",
    "$libunwind_code_dir/src/arm/Greg_states_iterate.c",
    "$libunwind_code_dir/src/arm/Gregs.c",
    "$libunwind_code_dir/src/arm/Gresume.c",
    "$libunwind_code_dir/src/arm/Gstash_frame.c",
    "$libunwind_code_dir/src/arm/Gstep.c",
    "$libunwind_code_dir/src/arm/Gtrace.c",
    "$libunwind_code_dir/src/arm/Lcreate_addr_space.c",
    "$libunwind_code_dir/src/arm/Lex_tables.c",
    "$libunwind_code_dir/src/arm/Lget_proc_info.c",
    "$libunwind_code_dir/src/arm/Lget_save_loc.c",
    "$libunwind_code_dir/src/arm/Lglobal.c",
    "$libunwind_code_dir/src/arm/Linit.c",
    "$libunwind_code_dir/src/arm/Linit_local.c",
    "$libunwind_code_dir/src/arm/Linit_remote.c",
    "$libunwind_code_dir/src/arm/Los-linux.c",
    "$libunwind_code_dir/src/arm/Lregs.c",
    "$libunwind_code_dir/src/arm/Lresume.c",
    "$libunwind_code_dir/src/arm/Lstash_frame.c",
    "$libunwind_code_dir/src/arm/Lstep.c",
    "$libunwind_code_dir/src/arm/Ltrace.c",
    "$libunwind_code_dir/src/arm/getcontext.S",
    "$libunwind_code_dir/src/arm/is_fpreg.c",
    "$libunwind_code_dir/src/arm/regname.c",
    "$libunwind_code_dir/src/arm/siglongjmp.S",
    "$libunwind_code_dir/src/elf32.c",
    "$libunwind_code_dir/src/aarch64/Gcreate_addr_space.c",
    "$libunwind_code_dir/src/aarch64/Gget_proc_info.c",
    "$libunwind_code_dir/src/aarch64/Gget_save_loc.c",
    "$libunwind_code_dir/src/aarch64/Gglobal.c",
    "$libunwind_code_dir/src/aarch64/Ginit.c",
    "$libunwind_code_dir/src/aarch64/Ginit_local.c",
    "$libunwind_code_dir/src/aarch64/Ginit_remote.c",
    "$libunwind_code_dir/src/aarch64/Gis_signal_frame.c",
    "$libunwind_code_dir/src/aarch64/Gregs.c",
    "$libunwind_code_dir/src/aarch64/Gresume.c",
    "$libunwind_code_dir/src/aarch64/Gstash_frame.c",
    "$libunwind_code_dir/src/aarch64/Gstep.c",
    "$libunwind_code_dir/src/aarch64/Gtrace.c",
    "$libunwind_code_dir/src/aarch64/Lcreate_addr_space.c",
    "$libunwind_code_dir/src/aarch64/Lget_proc_info.c",
    "$libunwind_code_dir/src/aarch64/Lget_save_loc.c",
    "$libunwind_code_dir/src/aarch64/Lglobal.c",
    "$libunwind_code_dir/src/aarch64/Linit.c",
    "$libunwind_code_dir/src/aarch64/Linit_local.c",
    "$libunwind_code_dir/src/aarch64/Linit_remote.c",
    "$libunwind_code_dir/src/aarch64/Lis_signal_frame.c",
    "$libunwind_code_dir/src/aarch64/Lregs.c",
    "$libunwind_code_dir/src/aarch64/Lresume.c",
    "$libunwind_code_dir/src/aarch64/Lstash_frame.c",
    "$libunwind_code_dir/src/aarch64/Lstep.c",
    "$libunwind_code_dir/src/aarch64/Ltrace.c",
    "$libunwind_code_dir/src/aarch64/getcontext.S",
    "$libunwind_code_dir/src/aarch64/is_fpreg.c",
    "$libunwind_code_dir/src/aarch64/regname.c",
    "$libunwind_code_dir/src/elf64.c",
    "$libunwind_code_dir/src/x86_64/Gcreate_addr_space.c",
    "$libunwind_code_dir/src/x86_64/Gget_proc_info.c",
    "$libunwind_code_dir/src/x86_64/Gget_save_loc.c",
    "$libunwind_code_dir/src/x86_64/Gglobal.c",
    "$libunwind_code_dir/src/x86_64/Ginit.c",
    "$libunwind_code_dir/src/x86_64/Ginit_local.c",
    "$libunwind_code_dir/src/x86_64/Ginit_remote.c",
    "$libunwind_code_dir/src/x86_64/Gos-linux.c",
    "$libunwind_code_dir/src/x86_64/Gregs.c",
    "$libunwind_code_dir/src/x86_64/Gresume.c",
    "$libunwind_code_dir/src/x86_64/Gstash_frame.c",
    "$libunwind_code_dir/src/x86_64/Gstep.c",
    "$libunwind_code_dir/src/x86_64/Gtrace.c",
    "$libunwind_code_dir/src/x86_64/Lcreate_addr_space.c",
    "$libunwind_code_dir/src/x86_64/Lget_proc_info.c",
    "$libunwind_code_dir/src/x86_64/Lget_save_loc.c",
    "$libunwind_code_dir/src/x86_64/Lglobal.c",
    "$libunwind_code_dir/src/x86_64/Linit.c",
    "$libunwind_code_dir/src/x86_64/Linit_local.c",
    "$libunwind_code_dir/src/x86_64/Linit_remote.c",
    "$libunwind_code_dir/src/x86_64/Los-linux.c",
    "$libunwind_code_dir/src/x86_64/Lregs.c",
    "$libunwind_code_dir/src/x86_64/Lresume.c",
    "$libunwind_code_dir/src/x86_64/Lstash_frame.c",
    "$libunwind_code_dir/src/x86_64/Lstep.c",
    "$libunwind_code_dir/src/x86_64/Ltrace.c",
    "$libunwind_code_dir/src/x86_64/getcontext.S",
    "$libunwind_code_dir/src/x86_64/is_fpreg.c",
    "$libunwind_code_dir/src/x86_64/regname.c",
    "$libunwind_code_dir/src/x86_64/setcontext.S",
    "$libunwind_code_dir/src/riscv/Gapply_reg_state.c",
    "$libunwind_code_dir/src/riscv/Gcreate_addr_space.c",
    "$libunwind_code_dir/src/riscv/getcontext.S",
    "$libunwind_code_dir/src/riscv/Gget_proc_info.c",
    "$libunwind_code_dir/src/riscv/Gget_save_loc.c",
    "$libunwind_code_dir/src/riscv/Gglobal.c",
    "$libunwind_code_dir/src/riscv/Ginit.c",
    "$libunwind_code_dir/src/riscv/Ginit_local.c",
    "$libunwind_code_dir/src/riscv/Ginit_remote.c",
    "$libunwind_code_dir/src/riscv/Gis_signal_frame.c",
    "$libunwind_code_dir/src/riscv/Gregs.c",
    "$libunwind_code_dir/src/riscv/Greg_states_iterate.c",
    "$libunwind_code_dir/src/riscv/Gresume.c",
    "$libunwind_code_dir/src/riscv/Gstep.c",
    "$libunwind_code_dir/src/riscv/is_fpreg.c",
    "$libunwind_code_dir/src/riscv/Lcreate_addr_space.c",
    "$libunwind_code_dir/src/riscv/Lget_proc_info.c",
    "$libunwind_code_dir/src/riscv/Lget_save_loc.c",
    "$libunwind_code_dir/src/riscv/Lglobal.c",
    "$libunwind_code_dir/src/riscv/Linit.c",
    "$libunwind_code_dir/src/riscv/Linit_local.c",
    "$libunwind_code_dir/src/riscv/Linit_remote.c",
    "$libunwind_code_dir/src/riscv/Lis_signal_frame.c",
    "$libunwind_code_dir/src/riscv/Lregs.c",
    "$libunwind_code_dir/src/riscv/Lreg_states_iterate.c",
    "$libunwind_code_dir/src/riscv/Lresume.c",
    "$libunwind_code_dir/src/riscv/Lstep.c",
    "$libunwind_code_dir/src/riscv/offsets.h",
    "$libunwind_code_dir/src/riscv/regname.c",
    "$libunwind_code_dir/src/riscv/setcontext.S",
    "$libunwind_code_dir/src/riscv/siglongjmp.S",
  ]

  inputs = [ "//third_party/libunwind/libunwind-1.6.2.tar.gz" ]
  libunwind_path = rebase_path("${target_gen_dir}", root_build_dir)
  libunwind_source_path = rebase_path("//third_party/libunwind", root_build_dir)
  args = [
    "--gen-dir",
    "$libunwind_path",
    "--source-dir",
    "$libunwind_source_path",
  ]
}

if ("${target_cpu}" == "arm") {
  arm_source_local = [
    "$libunwind_code_dir/src/arm/Lcreate_addr_space.c",
    "$libunwind_code_dir/src/arm/Lex_tables.c",
    "$libunwind_code_dir/src/arm/Lget_proc_info.c",
    "$libunwind_code_dir/src/arm/Lget_save_loc.c",
    "$libunwind_code_dir/src/arm/Lglobal.c",
    "$libunwind_code_dir/src/arm/Linit.c",
    "$libunwind_code_dir/src/arm/Linit_local.c",
    "$libunwind_code_dir/src/arm/Linit_remote.c",
    "$libunwind_code_dir/src/arm/Los-linux.c",
    "$libunwind_code_dir/src/arm/Lregs.c",
    "$libunwind_code_dir/src/arm/Lresume.c",
    "$libunwind_code_dir/src/arm/Lstash_frame.c",
    "$libunwind_code_dir/src/arm/Lstep.c",
    "$libunwind_code_dir/src/arm/Ltrace.c",
  ]
} else if ("${target_cpu}" == "arm64") {
  arm64_source_local = [
    "$libunwind_code_dir/src/aarch64/Lcreate_addr_space.c",
    "$libunwind_code_dir/src/aarch64/Lget_proc_info.c",
    "$libunwind_code_dir/src/aarch64/Lget_save_loc.c",
    "$libunwind_code_dir/src/aarch64/Lglobal.c",
    "$libunwind_code_dir/src/aarch64/Linit.c",
    "$libunwind_code_dir/src/aarch64/Linit_local.c",
    "$libunwind_code_dir/src/aarch64/Linit_remote.c",
    "$libunwind_code_dir/src/aarch64/Lis_signal_frame.c",
    "$libunwind_code_dir/src/aarch64/Lregs.c",
    "$libunwind_code_dir/src/aarch64/Lresume.c",
    "$libunwind_code_dir/src/aarch64/Lstash_frame.c",
    "$libunwind_code_dir/src/aarch64/Lstep.c",
    "$libunwind_code_dir/src/aarch64/Ltrace.c",
  ]
} else if ("${target_cpu}" == "riscv64") {
  riscv64_source_local = [
    "$libunwind_code_dir/src/riscv/Lcreate_addr_space.c",
    "$libunwind_code_dir/src/riscv/Lget_proc_info.c",
    "$libunwind_code_dir/src/riscv/Lget_save_loc.c",
    "$libunwind_code_dir/src/riscv/Lglobal.c",
    "$libunwind_code_dir/src/riscv/Linit.c",
    "$libunwind_code_dir/src/riscv/Linit_local.c",
    "$libunwind_code_dir/src/riscv/Linit_remote.c",
    "$libunwind_code_dir/src/riscv/Lis_signal_frame.c",
    "$libunwind_code_dir/src/riscv/Lreg_states_iterate.c",
    "$libunwind_code_dir/src/riscv/Lregs.c",
    "$libunwind_code_dir/src/riscv/Lresume.c",
    "$libunwind_code_dir/src/riscv/Lstep.c",
  ]
} else if ("${target_cpu}" == "x64" || "${target_cpu}" == "x86_64") {
  x64_source_local = [
    "$libunwind_code_dir/src/x86_64/Lcreate_addr_space.c",
    "$libunwind_code_dir/src/x86_64/Lget_proc_info.c",
    "$libunwind_code_dir/src/x86_64/Lget_save_loc.c",
    "$libunwind_code_dir/src/x86_64/Lglobal.c",
    "$libunwind_code_dir/src/x86_64/Linit.c",
    "$libunwind_code_dir/src/x86_64/Linit_local.c",
    "$libunwind_code_dir/src/x86_64/Linit_remote.c",
    "$libunwind_code_dir/src/x86_64/Los-linux.c",
    "$libunwind_code_dir/src/x86_64/Lregs.c",
    "$libunwind_code_dir/src/x86_64/Lresume.c",
    "$libunwind_code_dir/src/x86_64/Lstash_frame.c",
    "$libunwind_code_dir/src/x86_64/Lstep.c",
    "$libunwind_code_dir/src/x86_64/Ltrace.c",
  ]
}

libunwind_la_SOURCES_local = [
  "$libunwind_code_dir/src/mi/Ldyn-extract.c",
  "$libunwind_code_dir/src/mi/Lfind_dynamic_proc_info.c",
  "$libunwind_code_dir/src/mi/Lget_proc_info_by_ip.c",
  "$libunwind_code_dir/src/mi/Lget_proc_name.c",
  "$libunwind_code_dir/src/mi/Lput_dynamic_unwind_info.c",
  "$libunwind_code_dir/src/mi/Ldestroy_addr_space.c",
  "$libunwind_code_dir/src/mi/Lget_reg.c",
  "$libunwind_code_dir/src/mi/Lset_reg.c",
  "$libunwind_code_dir/src/mi/Lget_fpreg.c",
  "$libunwind_code_dir/src/mi/Lset_fpreg.c",
  "$libunwind_code_dir/src/mi/Lset_caching_policy.c",
  "$libunwind_code_dir/src/mi/Lset_cache_size.c",
]

remove_sources = []

ptrace_sources = [
  "$libunwind_code_dir/src/ptrace/_UPT_access_fpreg.c",
  "$libunwind_code_dir/src/ptrace/_UPT_access_mem.c",
  "$libunwind_code_dir/src/ptrace/_UPT_access_reg.c",
  "$libunwind_code_dir/src/ptrace/_UPT_accessors.c",
  "$libunwind_code_dir/src/ptrace/_UPT_create.c",
  "$libunwind_code_dir/src/ptrace/_UPT_destroy.c",
  "$libunwind_code_dir/src/ptrace/_UPT_find_proc_info.c",
  "$libunwind_code_dir/src/ptrace/_UPT_get_dyn_info_list_addr.c",
  "$libunwind_code_dir/src/ptrace/_UPT_get_proc_name.c",
  "$libunwind_code_dir/src/ptrace/_UPT_put_unwind_info.c",
  "$libunwind_code_dir/src/ptrace/_UPT_reg_offset.c",
  "$libunwind_code_dir/src/ptrace/_UPT_resume.c",
]

libunwind_la_SOURCES_local_nounwind = [
  "$libunwind_code_dir/src/mi/backtrace.c",
  "$libunwind_code_dir/src/mi/dyn-cancel.c",
  "$libunwind_code_dir/src/mi/dyn-info-list.c",
  "$libunwind_code_dir/src/mi/dyn-register.c",
  "$libunwind_code_dir/src/mi/Ldyn-extract.c",
  "$libunwind_code_dir/src/mi/Lfind_dynamic_proc_info.c",

  # "$libunwind_code_dir/src/mi/Lget_accessors.c", # miss
  "$libunwind_code_dir/src/mi/Lget_proc_info_by_ip.c",
  "$libunwind_code_dir/src/mi/Lget_proc_name.c",
  "$libunwind_code_dir/src/mi/Lput_dynamic_unwind_info.c",
  "$libunwind_code_dir/src/mi/Ldestroy_addr_space.c",
  "$libunwind_code_dir/src/mi/Lget_reg.c",
  "$libunwind_code_dir/src/mi/Lset_reg.c",
  "$libunwind_code_dir/src/mi/Lget_fpreg.c",
  "$libunwind_code_dir/src/mi/Lset_fpreg.c",
  "$libunwind_code_dir/src/mi/Lset_caching_policy.c",
  "$libunwind_code_dir/src/mi/Lset_cache_size.c",
]

libunwind_dwarf_local_la_SOURCES = [
  "$libunwind_code_dir/src/dwarf/Lexpr.c",
  "$libunwind_code_dir/src/dwarf/Lfde.c",
  "$libunwind_code_dir/src/dwarf/Lparser.c",
  "$libunwind_code_dir/src/dwarf/Lpe.c",
  "$libunwind_code_dir/src/dwarf/Lfind_proc_info-lsb.c",
  "$libunwind_code_dir/src/dwarf/Lfind_unwind_table.c",
]

# remove local file
remove_sources += libunwind_la_SOURCES_local_nounwind
remove_sources += libunwind_dwarf_local_la_SOURCES
remove_sources += ptrace_sources

config("unwind_config_public") {
  include_dirs = [
    "$libunwind_code_dir/src",
    "$libunwind_code_dir/include",
    get_label_info(":libunwind_action", "target_gen_dir") + "/libunwind-1.6.2",
  ]

  cflags = [
    "-D_GNU_SOURCE",
    "-DHAVE_CONFIG_H",
    "-DNDEBUG",
    "-DCC_IS_CLANG",
    "-fcommon",
    "-Wno-absolute-value",
    "-Wno-header-guard",
    "-Wno-unused-parameter",
    "-Wno-unused-variable",
    "-Wno-int-to-pointer-cast",
    "-Wno-pointer-to-int-cast",
    "-Wno-error",
  ]

  if (defined(ohos_lite)) {
    cflags += [ "-fPIC" ]
  }

  if (target_cpu == "arm") {
    include_dirs += [ "$libunwind_code_dir/include/tdep-arm" ]
    cflags += [
      "-Wno-inline-asm",
      "-Wno-shift-count-overflow",
      "-Wno-tautological-constant-out-of-range-compare",
      "-Wno-unused-function",
    ]
  } else if (target_cpu == "riscv64") {
    include_dirs += [ "$libunwind_code_dir/include/tdep-riscv" ]
    cflags += [ "-Wno-implicit-function-declaration" ]
  } else if (target_cpu == "arm64") {
    include_dirs += [ "$libunwind_code_dir/include/tdep-aarch64" ]
    cflags += [ "-Wno-incompatible-pointer-types" ]
  } else if (target_cpu == "x64" || target_cpu == "x86_64") {
    include_dirs += [ "$libunwind_code_dir/include/tdep-x86_64" ]
  } else if (target_cpu == "mipsel") {
    include_dirs += [ "$libunwind_code_dir/include/tdep-mips" ]
  }
}

config("unwind_config_remote") {
  cflags =
      [ "-Wno-format" ]  # some debug feature will warning in host x64 build
}

config("unwind_config_local_only") {
  defines = [ "UNW_LOCAL_ONLY" ]
}

config("unwind_config_remote_public") {
  cflags = []
  include_dirs = []
  defines = []

  # this is a host tools build
  # what means host use remote mode to unwind
  # with dwarf from stack or coredump or something not real target
  # There is an exception, we can support local unwind for linux.
  cflags += [ "-DUNW_REMOTE_ONLY" ]

  cflags += [ "-DBUILD_REMOTE" ]

  cflags += [ "-Wno-sometimes-uninitialized" ]  # some value not initialized in
                                                # host x64 build
  cflags += [ "-Wno-int-to-void-pointer-cast" ]

  if (is_linux) {
    cflags += [ "-g" ]  # we need debug info when it crash.
  }

  defines += [ "build_remote=1" ]
  defines += [ "target_cpu=${target_cpu}" ]
  defines += [ "host_toolchain=${host_toolchain}" ]
  defines += [ "current_toolchain=${current_toolchain}" ]
  defines += [ "default_toolchain=${default_toolchain}" ]
}

config("unwind_config_arm") {
  defines = [ "UNW_TARGET_ARM" ]
}

config("unwind_config_arm64") {
  defines = [ "UNW_TARGET_ARM64" ]
}

config("unwind_config_arm64_opt") {
  defines = [ "ONLY_RECOVER_GENERAL_REGS" ]
}

config("unwind_config_x64") {
  defines = [ "UNW_TARGET_X86_64" ]
  defines += [ "UNW_TARGET_X86_64_LINUX" ]
}

config("unwind_config_x86_64") {
  defines = [ "UNW_TARGET_X86_64" ]
  defines += [ "UNW_TARGET_X86_64_LINUX" ]
}

config("unwind_config_riscv64") {
  defines = [ "UNW_TARGET_RISCV" ]
}

if (defined(ohos_lite)) {
  source_set("unwind_source_arm") {
    configs += [ ":unwind_config_remote" ]
    public_configs = [
      ":unwind_config_public",
      ":unwind_config_remote_public",
      ":unwind_config_arm",
    ]
    sources = common_source

    # no jump lib
    arm_source -= [
      "$libunwind_code_dir/src/arm/getcontext.S",
      "$libunwind_code_dir/src/arm/siglongjmp.S",
    ]
    sources += arm_source
    sources -= remove_sources
    deps = [ ":libunwind_action" ]
  }

  source_set("unwind_source_arm64") {
    configs += [ ":unwind_config_remote" ]
    public_configs = [
      ":unwind_config_public",
      ":unwind_config_remote_public",
      ":unwind_config_arm64",
    ]
    sources = common_source

    arm64_source -= [ "$libunwind_code_dir/src/aarch64/getcontext.S" ]

    sources += arm64_source
    sources -= remove_sources
    deps = [ ":libunwind_action" ]
  }

  source_set("unwind_source_x64") {
    configs += [ ":unwind_config_remote" ]
    public_configs = [
      ":unwind_config_public",
      ":unwind_config_remote_public",
      ":unwind_config_x64",
    ]
    sources = common_source

    # no jump lib
    x64_source -= [
      "$libunwind_code_dir/src/x86_64/getcontext.S",
      "$libunwind_code_dir/src/x86_64/setcontext.S",
    ]
    sources += x64_source
    sources -= remove_sources
    deps = [ ":libunwind_action" ]
  }

  source_set("unwind_source_riscv64") {
    configs += [ ":unwind_config_remote" ]
    public_configs = [
      ":unwind_config_public",
      ":unwind_config_remote_public",
      ":unwind_config_riscv64",
    ]
    sources = common_source

    # no jump lib
    riscv64_source -= [
      "$libunwind_code_dir/src/riscv/getcontext.S",
      "$libunwind_code_dir/src/riscv/setcontext.S",
    ]

    sources += riscv64_source
    sources -= remove_sources
    deps = [ ":libunwind_action" ]
  }

  source_set("unwind_source") {
    configs += [ ":unwind_config_public" ]
    sources = common_source

    if (target_cpu == "arm") {
      # no jump lib
      arm_source -= [
        "$libunwind_code_dir/src/arm/getcontext.S",
        "$libunwind_code_dir/src/arm/siglongjmp.S",
      ]

      # as libc++ is static linked with libunwind.a
      # we remove the Gstep.c for duplicated symbol violation
      sources += arm_source
      public_configs = [ ":unwind_config_arm" ]
    } else if (target_cpu == "arm64") {
      sources += arm64_source
      public_configs = [ ":unwind_config_arm64" ]
    } else if (target_cpu == "riscv64") {
      sources += riscv64_source
      public_configs = [ ":unwind_config_riscv64" ]
    } else if (target_cpu == "x64") {
      sources += x64_source
      public_configs = [ ":unwind_config_x64" ]
    } else if (target_cpu == "x86_64") {
      sources += x64_source
      public_configs = [ ":unwind_config_x86_64" ]
    }
    deps = [ ":libunwind_action" ]
  }

  shared_library("libunwind") {
    deps = [
      ":libunwind_action",
      ":unwind_source",
    ]
    public_configs = [ ":unwind_config_public" ]
  }

  static_library("libunwind_local") {
    sources = common_source
    public_configs = [ ":unwind_config_public" ]
    public_configs += [ ":unwind_config_local_only" ]

    if (target_cpu == "arm") {
      sources += arm_source
      sources -= arm_source_local
      public_configs += [ ":unwind_config_arm" ]
    } else if (target_cpu == "arm64") {
      sources += arm64_source
      sources -= arm64_source_local
      public_configs += [ ":unwind_config_arm64" ]
    } else if (target_cpu == "riscv64") {
      sources += riscv64_source
      sources -= riscv64_source_local
      public_configs += [ ":unwind_config_riscv64" ]
    } else if (target_cpu == "x64") {
      sources += x64_source
      sources -= x64_source_local
      public_configs += [ ":unwind_config_x64" ]
    } else if (target_cpu == "x86_64") {
      sources += x64_source
      sources -= x64_source_local
      public_configs += [ ":unwind_config_x86_64" ]
    }

    sources -= libunwind_dwarf_local_la_SOURCES
    sources -= libunwind_la_SOURCES_local
    sources -= ptrace_sources
    cflags = [
      "-DHAS_ARK_FRAME",
      "-DPARSE_BUILD_ID",
      "-DUNW_LOCAL_ONLY",
      "-DNO_RESERVE_CACHE",
    ]
    deps = [ ":libunwind_action" ]
  }
} else {
  ohos_source_set("unwind_source_arm") {
    configs = [ ":unwind_config_remote" ]
    public_configs = [
      ":unwind_config_public",
      ":unwind_config_remote_public",
      ":unwind_config_arm",
    ]
    sources = common_source

    # no jump lib
    arm_source -= [
      "$libunwind_code_dir/src/arm/getcontext.S",
      "$libunwind_code_dir/src/arm/siglongjmp.S",
    ]
    sources += arm_source
    sources -= remove_sources
    deps = [ ":libunwind_action" ]
  }

  ohos_source_set("unwind_source_arm64") {
    configs = [ ":unwind_config_remote" ]
    public_configs = [
      ":unwind_config_public",
      ":unwind_config_remote_public",
      ":unwind_config_arm64",
    ]
    sources = common_source

    arm64_source -= [ "$libunwind_code_dir/src/aarch64/getcontext.S" ]

    sources += arm64_source
    sources -= remove_sources
    deps = [ ":libunwind_action" ]
  }

  ohos_source_set("unwind_source_arm64_opt") {
    configs = [ ":unwind_config_remote" ]
    public_configs = [
      ":unwind_config_public",
      ":unwind_config_remote_public",
      ":unwind_config_arm64",
      ":unwind_config_arm64_opt",
    ]
    sources = common_source

    arm64_source -= [ "$libunwind_code_dir/src/aarch64/getcontext.S" ]

    sources += arm64_source
    sources -= remove_sources
    deps = [ ":libunwind_action" ]
  }

  ohos_source_set("unwind_source_x64") {
    configs = [ ":unwind_config_remote" ]
    public_configs = [
      ":unwind_config_public",
      ":unwind_config_remote_public",
      ":unwind_config_x64",
    ]
    sources = common_source

    # no jump lib
    x64_source -= [
      "$libunwind_code_dir/src/x86_64/getcontext.S",
      "$libunwind_code_dir/src/x86_64/setcontext.S",
    ]
    sources += x64_source
    sources -= remove_sources
    deps = [ ":libunwind_action" ]
  }

  ohos_source_set("unwind_source_x86_64") {
    configs = [ ":unwind_config_remote" ]
    public_configs = [
      ":unwind_config_public",
      ":unwind_config_remote_public",
      ":unwind_config_x86_64",
    ]
    sources = common_source

    # no jump lib
    x64_source -= [
      "$libunwind_code_dir/src/x86_64/getcontext.S",
      "$libunwind_code_dir/src/x86_64/setcontext.S",
    ]
    sources += x64_source
    sources -= remove_sources
    deps = [ ":libunwind_action" ]
  }

  ohos_source_set("unwind_source_riscv64") {
    configs = [ ":unwind_config_remote" ]
    public_configs = [
      ":unwind_config_public",
      ":unwind_config_remote_public",
      ":unwind_config_riscv64",
    ]
    sources = common_source

    # no jump lib
    riscv64_source -= [
      "$libunwind_code_dir/src/riscv/getcontext.S",
      "$libunwind_code_dir/src/riscv/setcontext.S",
    ]

    sources += riscv64_source
    sources -= remove_sources
    deps = [ ":libunwind_action" ]
  }

  ohos_source_set("unwind_source") {
    configs = [ ":unwind_config_public" ]
    sources = common_source

    if (target_cpu == "riscv64") {
      # as libc++ is static linked with libunwind.a
      # we remove the Gstep.c for duplicated symbol violation
      sources += riscv64_source
      public_configs = [ ":unwind_config_riscv64" ]
    } else if (target_cpu == "arm") {
      sources += arm_source
      public_configs = [ ":unwind_config_arm" ]
    } else if (target_cpu == "arm64") {
      sources += arm64_source
      public_configs = [ ":unwind_config_arm64" ]
    } else if (target_cpu == "x64") {
      sources += x64_source
      public_configs = [ ":unwind_config_x64" ]
    } else if (target_cpu == "x86_64") {
      sources += x64_source
      public_configs = [ ":unwind_config_x86_64" ]
    }

    cflags = [
      "-DHAS_ARK_FRAME",
      "-DPARSE_BUILD_ID",
      "-DPARSE_ELF_IN_HAP",
    ]
    deps = [ ":libunwind_action" ]
    subsystem_name = "thirdparty"
    part_name = "libunwind"
  }

  ohos_shared_library("libunwind") {
    deps = [
      ":libunwind_action",
      ":unwind_source",
    ]
    install_images = [
      "system",
      "updater",
    ]
    public_configs = [ ":unwind_config_public" ]
    innerapi_tags = [
      "platformsdk",
      "chipsetsdk",
    ]
    subsystem_name = "thirdparty"
    part_name = "libunwind"
  }

  # for internal use only, the interfaces may have compatible issue
  ohos_static_library("libunwind_local") {
    sources = common_source
    public_configs = [ ":unwind_config_public" ]
    public_configs += [ ":unwind_config_local_only" ]

    if (target_cpu == "arm") {
      sources += arm_source
      sources -= arm_source_local
      public_configs += [ ":unwind_config_arm" ]
    } else if (target_cpu == "arm64") {
      sources += arm64_source
      sources -= arm64_source_local
      public_configs += [ ":unwind_config_arm64" ]
    } else if (target_cpu == "riscv64") {
      sources += riscv64_source
      sources -= riscv64_source_local
      public_configs += [ ":unwind_config_riscv64" ]
    } else if (target_cpu == "x64") {
      sources += x64_source
      sources -= x64_source_local
      public_configs += [ ":unwind_config_x64" ]
    } else if (target_cpu == "x86_64") {
      sources += x64_source
      sources -= x64_source_local
      public_configs += [ ":unwind_config_x86_64" ]
    }

    sources -= libunwind_dwarf_local_la_SOURCES
    sources -= libunwind_la_SOURCES_local
    sources -= ptrace_sources
    deps = [ ":libunwind_action" ]
    cflags = [
      "-DHAS_ARK_FRAME",
      "-DPARSE_BUILD_ID",
      "-DUNW_LOCAL_ONLY",
      "-DNO_RESERVE_CACHE",
      "-DHAVE_PIPE2",
    ]

    subsystem_name = "thirdparty"
    part_name = "libunwind"
  }
}
